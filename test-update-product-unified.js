const axios = require("axios");

// C·∫•u h√¨nh API
const API_BASE_URL = "http://localhost:5000/api/v1";
const TEST_PRODUCT_ID = "64f8b8b8b8b8b8b8b8b8b8b8"; // Thay b·∫±ng ID th·ª±c t·∫ø

// Test data cho update s·∫£n ph·∫©m
const updateData = {
    name: "S·∫£n ph·∫©m test c·∫≠p nh·∫≠t",
    price: 299000,
    sku: "TEST-UPDATE-001",
    description: "M√¥ t·∫£ s·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t",
    quantity: 50,
    isVisible: true,
    isFeatured: false
};

// H√†m test update s·∫£n ph·∫©m v·ªõi validation th·ªëng nh·∫•t
async function testUpdateProductUnified() {
    try {
        console.log("üöÄ B·∫Øt ƒë·∫ßu test API update s·∫£n ph·∫©m v·ªõi validation th·ªëng nh·∫•t...");
        console.log("üìù D·ªØ li·ªáu c·∫≠p nh·∫≠t:", JSON.stringify(updateData, null, 2));

        // Test 1: Update s·∫£n ph·∫©m kh√¥ng c√≥ token (expect 401)
        console.log("\nüìã Test 1: Update s·∫£n ph·∫©m kh√¥ng c√≥ token (expect 401)");
        try {
            const response = await axios.put(`${API_BASE_URL}/products/${TEST_PRODUCT_ID}`, updateData);
            console.log("‚ùå Test th·∫•t b·∫°i: Kh√¥ng n√™n th√†nh c√¥ng khi kh√¥ng c√≥ token");
        } catch (error) {
            if (error.response && error.response.status === 401) {
                console.log("‚úÖ Test th√†nh c√¥ng: Nh·∫≠n ƒë∆∞·ª£c l·ªói 401 (Unauthorized)");
            } else {
                console.log(
                    "‚ùå Test th·∫•t b·∫°i: Nh·∫≠n ƒë∆∞·ª£c l·ªói kh√¥ng mong ƒë·ª£i:",
                    error.response?.status,
                    error.response?.data
                );
            }
        }

        // Test 2: Update s·∫£n ph·∫©m v·ªõi d·ªØ li·ªáu thi·∫øu (expect 400)
        console.log("\nüìã Test 2: Update s·∫£n ph·∫©m v·ªõi d·ªØ li·ªáu thi·∫øu (expect 400)");
        try {
            const invalidData = { name: "Ch·ªâ c√≥ t√™n" }; // Thi·∫øu price v√† sku
            const response = await axios.put(`${API_BASE_URL}/products/${TEST_PRODUCT_ID}`, invalidData, {
                headers: {
                    Authorization: "Bearer fake-token"
                }
            });
            console.log("‚ùå Test th·∫•t b·∫°i: Kh√¥ng n√™n th√†nh c√¥ng khi thi·∫øu d·ªØ li·ªáu");
        } catch (error) {
            if (error.response && error.response.status === 400) {
                console.log("‚úÖ Test th√†nh c√¥ng: Nh·∫≠n ƒë∆∞·ª£c l·ªói 400 (Validation error)");
                console.log("üìÑ Th√¥ng b√°o l·ªói:", error.response.data.message);
                if (error.response.data.errors) {
                    console.log("üîç Chi ti·∫øt l·ªói:", error.response.data.errors);
                }
            } else {
                console.log(
                    "‚ùå Test th·∫•t b·∫°i: Nh·∫≠n ƒë∆∞·ª£c l·ªói kh√¥ng mong ƒë·ª£i:",
                    error.response?.status,
                    error.response?.data
                );
            }
        }

        // Test 3: Update s·∫£n ph·∫©m v·ªõi d·ªØ li·ªáu r·ªóng (expect 400)
        console.log("\nüìã Test 3: Update s·∫£n ph·∫©m v·ªõi d·ªØ li·ªáu r·ªóng (expect 400)");
        try {
            const emptyData = { name: "", price: "", sku: "" };
            const response = await axios.put(`${API_BASE_URL}/products/${TEST_PRODUCT_ID}`, emptyData, {
                headers: {
                    Authorization: "Bearer fake-token"
                }
            });
            console.log("‚ùå Test th·∫•t b·∫°i: Kh√¥ng n√™n th√†nh c√¥ng khi d·ªØ li·ªáu r·ªóng");
        } catch (error) {
            if (error.response && error.response.status === 400) {
                console.log("‚úÖ Test th√†nh c√¥ng: Nh·∫≠n ƒë∆∞·ª£c l·ªói 400 (Validation error)");
                console.log("üìÑ Th√¥ng b√°o l·ªói:", error.response.data.message);
                if (error.response.data.errors) {
                    console.log("üîç Chi ti·∫øt l·ªói:", error.response.data.errors);
                }
            } else {
                console.log(
                    "‚ùå Test th·∫•t b·∫°i: Nh·∫≠n ƒë∆∞·ª£c l·ªói kh√¥ng mong ƒë·ª£i:",
                    error.response?.status,
                    error.response?.data
                );
            }
        }

        // Test 4: Update s·∫£n ph·∫©m v·ªõi d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá (expect 400)
        console.log("\nüìã Test 4: Update s·∫£n ph·∫©m v·ªõi d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá (expect 400)");
        try {
            const invalidData = {
                name: "A", // Qu√° ng·∫Øn
                price: -100, // Gi√° √¢m
                sku: "TEST" // SKU qu√° ng·∫Øn
            };
            const response = await axios.put(`${API_BASE_URL}/products/${TEST_PRODUCT_ID}`, invalidData, {
                headers: {
                    Authorization: "Bearer fake-token"
                }
            });
            console.log("‚ùå Test th·∫•t b·∫°i: Kh√¥ng n√™n th√†nh c√¥ng khi d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá");
        } catch (error) {
            if (error.response && error.response.status === 400) {
                console.log("‚úÖ Test th√†nh c√¥ng: Nh·∫≠n ƒë∆∞·ª£c l·ªói 400 (Validation error)");
                console.log("üìÑ Th√¥ng b√°o l·ªói:", error.response.data.message);
                if (error.response.data.errors) {
                    console.log("üîç Chi ti·∫øt l·ªói:", error.response.data.errors);
                }
            } else {
                console.log(
                    "‚ùå Test th·∫•t b·∫°i: Nh·∫≠n ƒë∆∞·ª£c l·ªói kh√¥ng mong ƒë·ª£i:",
                    error.response?.status,
                    error.response?.data
                );
            }
        }

        // Test 5: Update s·∫£n ph·∫©m v·ªõi token kh√¥ng h·ª£p l·ªá (expect 401)
        console.log("\nüìã Test 5: Update s·∫£n ph·∫©m v·ªõi token kh√¥ng h·ª£p l·ªá (expect 401)");
        try {
            const response = await axios.put(`${API_BASE_URL}/products/${TEST_PRODUCT_ID}`, updateData, {
                headers: {
                    Authorization: "Bearer fake-token"
                }
            });
            console.log("‚ùå Test th·∫•t b·∫°i: Kh√¥ng n√™n th√†nh c√¥ng khi token kh√¥ng h·ª£p l·ªá");
        } catch (error) {
            if (error.response && error.response.status === 401) {
                console.log("‚úÖ Test th√†nh c√¥ng: Nh·∫≠n ƒë∆∞·ª£c l·ªói 401 (Token kh√¥ng h·ª£p l·ªá)");
            } else {
                console.log(
                    "‚ùå Test th·∫•t b·∫°i: Nh·∫≠n ƒë∆∞·ª£c l·ªói kh√¥ng mong ƒë·ª£i:",
                    error.response?.status,
                    error.response?.data
                );
            }
        }

        console.log("\nüéâ Ho√†n th√†nh test API update s·∫£n ph·∫©m v·ªõi validation th·ªëng nh·∫•t!");
        console.log("\nüìù L∆∞u √Ω:");
        console.log("- ƒê·ªÉ test th√†nh c√¥ng v·ªõi token th·∫≠t, b·∫°n c·∫ßn ƒëƒÉng nh·∫≠p v√† l·∫•y JWT token");
        console.log("- Thay TEST_PRODUCT_ID b·∫±ng ID s·∫£n ph·∫©m th·ª±c t·∫ø trong database");
        console.log("- ƒê·∫£m b·∫£o backend ƒëang ch·∫°y tr√™n port 5000");
        console.log("- Validation gi·ªù ƒë√¢y s·ª≠ d·ª•ng express-validator th·ªëng nh·∫•t");
    } catch (error) {
        console.error("‚ùå L·ªói khi test:", error.message);
        if (error.response) {
            console.error("üìÑ Response data:", error.response.data);
            console.error("üî¢ Status:", error.response.status);
        }
    }
}

// H√†m test v·ªõi token th·∫≠t (n·∫øu c√≥)
async function testWithRealToken(token, productId) {
    try {
        console.log("\nüîê Test v·ªõi token th·∫≠t...");

        const response = await axios.put(`${API_BASE_URL}/products/${productId}`, updateData, {
            headers: {
                Authorization: `Bearer ${token}`
            }
        });

        console.log("‚úÖ Update th√†nh c√¥ng!");
        console.log("üìÑ Response:", response.data);
    } catch (error) {
        console.error("‚ùå L·ªói khi update v·ªõi token th·∫≠t:", error.response?.data || error.message);
    }
}

// Ch·∫°y test
if (require.main === module) {
    testUpdateProductUnified();

    // N·∫øu c√≥ token th·∫≠t, uncomment d√≤ng d∆∞·ªõi
    // const realToken = 'your-jwt-token-here';
    // const realProductId = 'real-product-id-here';
    // testWithRealToken(realToken, realProductId);
}

module.exports = { testUpdateProductUnified, testWithRealToken };
