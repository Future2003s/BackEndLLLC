{
    "info": {
        "name": "E-Commerce Backend API",
        "description": "Comprehensive API collection for Node.js e-commerce backend testing",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "variable": [
        {
            "key": "baseUrl",
            "value": "http://localhost:8081/api/v1",
            "type": "string"
        },
        {
            "key": "authToken",
            "value": "",
            "type": "string"
        },
        {
            "key": "refreshToken",
            "value": "",
            "type": "string"
        },
        {
            "key": "userId",
            "value": "",
            "type": "string"
        },
        {
            "key": "productId",
            "value": "",
            "type": "string"
        },
        {
            "key": "categoryId",
            "value": "",
            "type": "string"
        }
    ],
    "item": [
        {
            "name": "Authentication",
            "item": [
                {
                    "name": "Register User",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\",\n  \"email\": \"test@example.com\",\n  \"password\": \"TestPassword123!\",\n  \"phone\": \"+1234567890\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/auth/register",
                            "host": ["{{baseUrl}}"],
                            "path": ["auth", "register"]
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "if (pm.response.code === 201) {",
                                    "    const response = pm.response.json();",
                                    "    pm.collectionVariables.set('authToken', response.data.token);",
                                    "    pm.collectionVariables.set('refreshToken', response.data.refreshToken);",
                                    "    pm.collectionVariables.set('userId', response.data.user._id);",
                                    "    pm.test('Registration successful', () => {",
                                    "        pm.expect(response.success).to.be.true;",
                                    "        pm.expect(response.data.token).to.exist;",
                                    "    });",
                                    "}"
                                ]
                            }
                        }
                    ]
                },
                {
                    "name": "Login User",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"email\": \"test@example.com\",\n  \"password\": \"TestPassword123!\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/auth/login",
                            "host": ["{{baseUrl}}"],
                            "path": ["auth", "login"]
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "if (pm.response.code === 200) {",
                                    "    const response = pm.response.json();",
                                    "    pm.collectionVariables.set('authToken', response.data.token);",
                                    "    pm.collectionVariables.set('refreshToken', response.data.refreshToken);",
                                    "    pm.test('Login successful', () => {",
                                    "        pm.expect(response.success).to.be.true;",
                                    "        pm.expect(response.data.token).to.exist;",
                                    "    });",
                                    "}"
                                ]
                            }
                        }
                    ]
                },
                {
                    "name": "Get Current User",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{authToken}}"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/auth/me",
                            "host": ["{{baseUrl}}"],
                            "path": ["auth", "me"]
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Get current user successful', () => {",
                                    "    pm.expect(pm.response.code).to.equal(200);",
                                    "    const response = pm.response.json();",
                                    "    pm.expect(response.success).to.be.true;",
                                    "    pm.expect(response.data.email).to.exist;",
                                    "});"
                                ]
                            }
                        }
                    ]
                },
                {
                    "name": "Refresh Token",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"refreshToken\": \"{{refreshToken}}\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/auth/refresh-token",
                            "host": ["{{baseUrl}}"],
                            "path": ["auth", "refresh-token"]
                        }
                    }
                },
                {
                    "name": "Logout",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{authToken}}"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"refreshToken\": \"{{refreshToken}}\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/auth/logout",
                            "host": ["{{baseUrl}}"],
                            "path": ["auth", "logout"]
                        }
                    }
                }
            ]
        },
        {
            "name": "Products",
            "item": [
                {
                    "name": "Get All Products",
                    "request": {
                        "method": "GET",
                        "url": {
                            "raw": "{{baseUrl}}/products",
                            "host": ["{{baseUrl}}"],
                            "path": ["products"]
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Get products successful', () => {",
                                    "    pm.expect(pm.response.code).to.equal(200);",
                                    "    const response = pm.response.json();",
                                    "    if (response.data && response.data.length > 0) {",
                                    "        pm.collectionVariables.set('productId', response.data[0]._id);",
                                    "    }",
                                    "});"
                                ]
                            }
                        }
                    ]
                },
                {
                    "name": "Get Products with Pagination",
                    "request": {
                        "method": "GET",
                        "url": {
                            "raw": "{{baseUrl}}/products?page=1&limit=10",
                            "host": ["{{baseUrl}}"],
                            "path": ["products"],
                            "query": [
                                {
                                    "key": "page",
                                    "value": "1"
                                },
                                {
                                    "key": "limit",
                                    "value": "10"
                                }
                            ]
                        }
                    }
                },
                {
                    "name": "Search Products",
                    "request": {
                        "method": "GET",
                        "url": {
                            "raw": "{{baseUrl}}/products/search?q=test",
                            "host": ["{{baseUrl}}"],
                            "path": ["products", "search"],
                            "query": [
                                {
                                    "key": "q",
                                    "value": "test"
                                }
                            ]
                        }
                    }
                },
                {
                    "name": "Get Product by ID",
                    "request": {
                        "method": "GET",
                        "url": {
                            "raw": "{{baseUrl}}/products/{{productId}}",
                            "host": ["{{baseUrl}}"],
                            "path": ["products", "{{productId}}"]
                        }
                    }
                },
                {
                    "name": "Create Product (Admin)",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{authToken}}"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"name\": \"Test Product\",\n  \"description\": \"This is a test product for API testing\",\n  \"price\": 29.99,\n  \"sku\": \"TEST-001\",\n  \"category\": \"{{categoryId}}\",\n  \"trackQuantity\": true,\n  \"quantity\": 100,\n  \"allowBackorder\": false,\n  \"status\": \"active\",\n  \"isVisible\": true,\n  \"isFeatured\": false,\n  \"onSale\": false,\n  \"requiresShipping\": true,\n  \"tags\": [\"test\", \"api\"]\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/products",
                            "host": ["{{baseUrl}}"],
                            "path": ["products"]
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "if (pm.response.code === 201) {",
                                    "    const response = pm.response.json();",
                                    "    pm.collectionVariables.set('productId', response.data._id);",
                                    "    pm.test('Product created successfully', () => {",
                                    "        pm.expect(response.success).to.be.true;",
                                    "        pm.expect(response.data._id).to.exist;",
                                    "    });",
                                    "}"
                                ]
                            }
                        }
                    ]
                },
                {
                    "name": "Update Product (Admin)",
                    "request": {
                        "method": "PUT",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{authToken}}"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"name\": \"Updated Test Product\",\n  \"description\": \"This product has been updated via API\",\n  \"price\": 39.99,\n  \"sku\": \"TEST-001-UPDATED\",\n  \"isFeatured\": true,\n  \"onSale\": true,\n  \"salePrice\": 34.99\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/products/{{productId}}",
                            "host": ["{{baseUrl}}"],
                            "path": ["products", "{{productId}}"]
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Product updated successfully', () => {",
                                    "    pm.expect(pm.response.code).to.equal(200);",
                                    "    const response = pm.response.json();",
                                    "    pm.expect(response.success).to.be.true;",
                                    "    pm.expect(response.data.name).to.equal('Updated Test Product');",
                                    "    pm.expect(response.data.price).to.equal(39.99);",
                                    "    pm.expect(response.data.isFeatured).to.be.true;",
                                    "    pm.expect(response.data.onSale).to.be.true;",
                                    "    pm.expect(response.data.salePrice).to.equal(34.99);",
                                    "});"
                                ]
                            }
                        }
                    ]
                },
                {
                    "name": "Update Product Stock (Admin)",
                    "request": {
                        "method": "PUT",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{authToken}}"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"quantity\": 150\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/products/{{productId}}/stock",
                            "host": ["{{baseUrl}}"],
                            "path": ["products", "{{productId}}", "stock"]
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Product stock updated successfully', () => {",
                                    "    pm.expect(pm.response.code).to.equal(200);",
                                    "    const response = pm.response.json();",
                                    "    pm.expect(response.success).to.be.true;",
                                    "    pm.expect(response.data.quantity).to.equal(150);",
                                    "});"
                                ]
                            }
                        }
                    ]
                },
                {
                    "name": "Delete Product (Admin)",
                    "request": {
                        "method": "DELETE",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{authToken}}"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/products/{{productId}}",
                            "host": ["{{baseUrl}}"],
                            "path": ["products", "{{productId}}"]
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Product deleted successfully', () => {",
                                    "    pm.expect(pm.response.code).to.equal(200);",
                                    "    const response = pm.response.json();",
                                    "    pm.expect(response.success).to.be.true;",
                                    "});"
                                ]
                            }
                        }
                    ]
                },
                {
                    "name": "Create Product - Validation Error (Missing Required Fields)",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{authToken}}"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"name\": \"\",\n  \"price\": -10,\n  \"sku\": \"\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/products",
                            "host": ["{{baseUrl}}"],
                            "path": ["products"]
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Should return validation errors', () => {",
                                    "    pm.expect(pm.response.code).to.equal(400);",
                                    "    const response = pm.response.json();",
                                    "    pm.expect(response.success).to.be.false;",
                                    "    pm.expect(response.message).to.equal('Validation failed');",
                                    "    pm.expect(response.errors).to.be.an('array');",
                                    "    pm.expect(response.errors.length).to.be.greaterThan(0);",
                                    "    ",
                                    "    // Check specific validation errors",
                                    "    const nameError = response.errors.find(e => e.field === 'name');",
                                    "    const priceError = response.errors.find(e => e.field === 'price');",
                                    "    const skuError = response.errors.find(e => e.field === 'sku');",
                                    "    ",
                                    "    pm.expect(nameError).to.exist;",
                                    "    pm.expect(priceError).to.exist;",
                                    "    pm.expect(skuError).to.exist;",
                                    "});"
                                ]
                            }
                        }
                    ]
                },
                {
                    "name": "Update Product - Validation Error (Invalid Data)",
                    "request": {
                        "method": "PUT",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{authToken}}"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"name\": \"A\",\n  \"price\": -5,\n  \"sku\": \"\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/products/{{productId}}",
                            "host": ["{{baseUrl}}"],
                            "path": ["products", "{{productId}}"]
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Should return validation errors for update', () => {",
                                    "    pm.expect(pm.response.code).to.equal(400);",
                                    "    const response = pm.response.json();",
                                    "    pm.expect(response.success).to.be.false;",
                                    "    pm.expect(response.message).to.equal('Validation failed');",
                                    "    pm.expect(response.errors).to.be.an('array');",
                                    "    pm.expect(response.errors.length).to.be.greaterThan(0);",
                                    "});"
                                ]
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "Categories & Brands",
            "item": [
                {
                    "name": "Get Categories",
                    "request": {
                        "method": "GET",
                        "url": {
                            "raw": "{{baseUrl}}/categories",
                            "host": ["{{baseUrl}}"],
                            "path": ["categories"]
                        }
                    }
                },
                {
                    "name": "Get Brands",
                    "request": {
                        "method": "GET",
                        "url": {
                            "raw": "{{baseUrl}}/brands",
                            "host": ["{{baseUrl}}"],
                            "path": ["brands"]
                        }
                    }
                }
            ]
        },
        {
            "name": "Cart",
            "item": [
                {
                    "name": "Get Cart",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{authToken}}"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/cart",
                            "host": ["{{baseUrl}}"],
                            "path": ["cart"]
                        }
                    }
                },
                {
                    "name": "Add Item to Cart",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{authToken}}"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"productId\": \"{{productId}}\",\n  \"quantity\": 2\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/cart/add",
                            "host": ["{{baseUrl}}"],
                            "path": ["cart", "add"]
                        }
                    }
                },
                {
                    "name": "Update Cart Item",
                    "request": {
                        "method": "PUT",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{authToken}}"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"productId\": \"{{productId}}\",\n  \"quantity\": 3\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/cart/update",
                            "host": ["{{baseUrl}}"],
                            "path": ["cart", "update"]
                        }
                    }
                },
                {
                    "name": "Remove Item from Cart",
                    "request": {
                        "method": "DELETE",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{authToken}}"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/cart/remove/{{productId}}",
                            "host": ["{{baseUrl}}"],
                            "path": ["cart", "remove", "{{productId}}"]
                        }
                    }
                },
                {
                    "name": "Clear Cart",
                    "request": {
                        "method": "DELETE",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{authToken}}"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/cart/clear",
                            "host": ["{{baseUrl}}"],
                            "path": ["cart", "clear"]
                        }
                    }
                }
            ]
        },
        {
            "name": "Orders",
            "item": [
                {
                    "name": "Get Order History",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{authToken}}"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/orders",
                            "host": ["{{baseUrl}}"],
                            "path": ["orders"]
                        }
                    }
                },
                {
                    "name": "Create Order",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{authToken}}"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"shippingAddress\": {\n    \"street\": \"123 Test St\",\n    \"city\": \"Test City\",\n    \"state\": \"TS\",\n    \"zipCode\": \"12345\",\n    \"country\": \"Test Country\"\n  },\n  \"paymentMethod\": \"credit_card\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/orders",
                            "host": ["{{baseUrl}}"],
                            "path": ["orders"]
                        }
                    }
                },
                {
                    "name": "Get Order by ID",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{authToken}}"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/orders/{{orderId}}",
                            "host": ["{{baseUrl}}"],
                            "path": ["orders", "{{orderId}}"]
                        }
                    }
                }
            ]
        },
        {
            "name": "Security Tests",
            "item": [
                {
                    "name": "Access Protected Route (No Token)",
                    "request": {
                        "method": "GET",
                        "url": {
                            "raw": "{{baseUrl}}/auth/me",
                            "host": ["{{baseUrl}}"],
                            "path": ["auth", "me"]
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Should return 401 Unauthorized', () => {",
                                    "    pm.expect(pm.response.code).to.equal(401);",
                                    "});"
                                ]
                            }
                        }
                    ]
                },
                {
                    "name": "Access with Invalid Token",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer invalid-token-here"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/auth/me",
                            "host": ["{{baseUrl}}"],
                            "path": ["auth", "me"]
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Should return 401 Unauthorized', () => {",
                                    "    pm.expect(pm.response.code).to.equal(401);",
                                    "});"
                                ]
                            }
                        }
                    ]
                },
                {
                    "name": "Invalid Login Attempt",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"email\": \"invalid@example.com\",\n  \"password\": \"wrongpassword\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/auth/login",
                            "host": ["{{baseUrl}}"],
                            "path": ["auth", "login"]
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Should return 401 or 429', () => {",
                                    "    pm.expect([401, 429]).to.include(pm.response.code);",
                                    "});"
                                ]
                            }
                        }
                    ]
                }
            ]
        }
    ]
}
