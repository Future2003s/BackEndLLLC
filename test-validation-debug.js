const axios = require("axios");

// C·∫•u h√¨nh API
const API_BASE_URL = "http://localhost:5000/api/v1";

// Test data v·ªõi d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá
const invalidData = {
    product: {
        name: "A", // Qu√° ng·∫Øn (min: 2)
        price: -100, // Gi√° √¢m (min: 0)
        sku: "" // R·ªóng (required)
    },
    category: {
        name: "", // R·ªóng (min: 2)
        description: "A".repeat(600) // Qu√° d√†i (max: 500)
    },
    review: {
        rating: 6, // Qu√° cao (max: 5)
        productId: "invalid-id", // Kh√¥ng ph·∫£i MongoDB ID
        comment: "A".repeat(1100) // Qu√° d√†i (max: 1000)
    }
};

// H√†m test validation v·ªõi logging chi ti·∫øt
async function testValidationDebug() {
    console.log("üîç B·∫Øt ƒë·∫ßu debug validation...");

    try {
        // Test 1: Create product v·ªõi d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá
        console.log("\nüì¶ Test 1: Create product v·ªõi d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá");
        await testAPI("POST", "/products", invalidData.product, "fake-token", 400, "Create product validation");

        // Test 2: Create category v·ªõi d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá
        console.log("\nüìÇ Test 2: Create category v·ªõi d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá");
        await testAPI("POST", "/categories", invalidData.category, "fake-token", 400, "Create category validation");

        // Test 3: Create review v·ªõi d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá
        console.log("\n‚≠ê Test 3: Create review v·ªõi d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá");
        await testAPI("POST", "/reviews", invalidData.review, "fake-token", 400, "Create review validation");

        console.log("\nüéâ Ho√†n th√†nh debug validation!");
    } catch (error) {
        console.error("‚ùå L·ªói khi test:", error.message);
    }
}

// H√†m helper ƒë·ªÉ test API v·ªõi logging chi ti·∫øt
async function testAPI(method, endpoint, data, token, expectedStatus, description) {
    try {
        console.log(`\nüîç Testing: ${method} ${endpoint}`);
        console.log(`üìù Data:`, JSON.stringify(data, null, 2));
        console.log(`üéØ Expected status: ${expectedStatus}`);

        const config = {
            method: method.toLowerCase(),
            url: `${API_BASE_URL}${endpoint}`,
            headers: {
                "Content-Type": "application/json"
            }
        };

        if (token) {
            config.headers.Authorization = `Bearer ${token}`;
        }

        if (data) {
            config.data = data;
        }

        const response = await axios(config);

        console.log(`‚úÖ Response status: ${response.status}`);
        console.log(`üìÑ Response data:`, JSON.stringify(response.data, null, 2));

        if (response.status === expectedStatus) {
            console.log(`‚úÖ ${description}: Th√†nh c√¥ng - nh·∫≠n ƒë√∫ng status ${expectedStatus}`);
        } else {
            console.log(`‚ùå ${description}: Th·∫•t b·∫°i - expected ${expectedStatus}, got ${response.status}`);
        }
    } catch (error) {
        console.log(`\n‚ùå Error occurred:`);

        if (error.response) {
            console.log(`üìä Status: ${error.response.status}`);
            console.log(`üìÑ Response data:`, JSON.stringify(error.response.data, null, 2));
            console.log(`üîç Headers:`, JSON.stringify(error.response.headers, null, 2));

            if (error.response.status === expectedStatus) {
                console.log(`‚úÖ ${description}: Th√†nh c√¥ng - nh·∫≠n ƒë√∫ng status ${expectedStatus}`);

                // Ki·ªÉm tra format response
                if (error.response.data) {
                    console.log(`\nüîç Validation Response Analysis:`);
                    console.log(`- Success: ${error.response.data.success}`);
                    console.log(`- Message: ${error.response.data.message}`);

                    if (error.response.data.errors && Array.isArray(error.response.data.errors)) {
                        console.log(`- Number of errors: ${error.response.data.errors.length}`);
                        error.response.data.errors.forEach((err, index) => {
                            console.log(`  Error ${index + 1}:`);
                            console.log(`    Field: ${err.field}`);
                            console.log(`    Message: ${err.message}`);
                        });
                    } else {
                        console.log(`- No errors array found in response`);
                    }
                }
            } else {
                console.log(`‚ùå ${description}: Th·∫•t b·∫°i - expected ${expectedStatus}, got ${error.response.status}`);
            }
        } else if (error.request) {
            console.log(`‚ùå No response received:`, error.message);
        } else {
            console.log(`‚ùå Request setup error:`, error.message);
        }
    }
}

// Test validation v·ªõi d·ªØ li·ªáu r·ªóng
async function testEmptyDataValidation() {
    console.log("\nüß™ Test validation v·ªõi d·ªØ li·ªáu r·ªóng...");

    try {
        // Test v·ªõi d·ªØ li·ªáu r·ªóng
        const emptyData = {
            name: "",
            price: "",
            sku: ""
        };

        await testAPI("POST", "/products", emptyData, "fake-token", 400, "Empty data validation");
    } catch (error) {
        console.error("‚ùå L·ªói khi test empty data:", error.message);
    }
}

// Test validation v·ªõi d·ªØ li·ªáu null/undefined
async function testNullDataValidation() {
    console.log("\nüß™ Test validation v·ªõi d·ªØ li·ªáu null/undefined...");

    try {
        // Test v·ªõi d·ªØ li·ªáu null
        const nullData = {
            name: null,
            price: null,
            sku: null
        };

        await testAPI("POST", "/products", nullData, "fake-token", 400, "Null data validation");
    } catch (error) {
        console.error("‚ùå L·ªói khi test null data:", error.message);
    }
}

// Ch·∫°y t·∫•t c·∫£ tests
async function runAllTests() {
    console.log("üöÄ B·∫Øt ƒë·∫ßu ch·∫°y t·∫•t c·∫£ validation tests...");

    await testValidationDebug();
    await testEmptyDataValidation();
    await testNullDataValidation();

    console.log("\nüéâ Ho√†n th√†nh t·∫•t c·∫£ tests!");
}

// Ch·∫°y test
if (require.main === module) {
    runAllTests();
}

module.exports = {
    testValidationDebug,
    testEmptyDataValidation,
    testNullDataValidation,
    runAllTests
};
