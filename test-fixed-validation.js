const axios = require("axios");

// C·∫•u h√¨nh API
const API_BASE_URL = "http://localhost:8081/api/v1";

// Test data
const testData = {
    valid: {
        name: "S·∫£n ph·∫©m test h·ª£p l·ªá",
        price: 299000,
        sku: "TEST-001"
    },
    invalid: {
        name: "A", // Qu√° ng·∫Øn
        price: -100, // Gi√° √¢m
        sku: "" // R·ªóng
    },
    empty: {
        name: "",
        price: "",
        sku: ""
    },
    missing: {
        // Thi·∫øu t·∫•t c·∫£ fields
    }
};

// H√†m test validation ƒë√£ s·ª≠a
async function testFixedValidation() {
    console.log("üöÄ B·∫Øt ƒë·∫ßu test validation ƒë√£ s·ª≠a...");

    try {
        // Test 1: D·ªØ li·ªáu h·ª£p l·ªá (expect 401 - no token, nh∆∞ng validation pass)
        console.log("\nüì¶ Test 1: D·ªØ li·ªáu h·ª£p l·ªá");
        await testAPI("POST", "/products", testData.valid, null, 401, "Valid data - no token");

        // Test 2: D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá (expect 400 - validation error)
        console.log("\nüì¶ Test 2: D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá");
        await testAPI("POST", "/products", testData.invalid, "fake-token", 400, "Invalid data - validation error");

        // Test 3: D·ªØ li·ªáu r·ªóng (expect 400 - validation error)
        console.log("\nüì¶ Test 3: D·ªØ li·ªáu r·ªóng");
        await testAPI("POST", "/products", testData.empty, "fake-token", 400, "Empty data - validation error");

        // Test 4: Thi·∫øu d·ªØ li·ªáu (expect 400 - validation error)
        console.log("\nüì¶ Test 4: Thi·∫øu d·ªØ li·ªáu");
        await testAPI("POST", "/products", testData.missing, "fake-token", 400, "Missing data - validation error");

        console.log("\nüéâ Ho√†n th√†nh test validation ƒë√£ s·ª≠a!");
    } catch (error) {
        console.error("‚ùå L·ªói khi test:", error.message);
    }
}

// H√†m helper ƒë·ªÉ test API
async function testAPI(method, endpoint, data, token, expectedStatus, description) {
    try {
        console.log(`\nüîç Testing: ${method} ${endpoint}`);
        console.log(`üìù Data:`, JSON.stringify(data, null, 2));
        console.log(`üéØ Expected status: ${expectedStatus}`);

        const config = {
            method: method.toLowerCase(),
            url: `${API_BASE_URL}${endpoint}`,
            headers: {
                "Content-Type": "application/json"
            }
        };

        if (token) {
            config.headers.Authorization = `Bearer ${token}`;
        }

        if (data) {
            config.data = data;
        }

        const response = await axios(config);

        console.log(`‚úÖ Response status: ${response.status}`);
        console.log(`üìÑ Response data:`, JSON.stringify(response.data, null, 2));

        if (response.status === expectedStatus) {
            console.log(`‚úÖ ${description}: Th√†nh c√¥ng - nh·∫≠n ƒë√∫ng status ${expectedStatus}`);
        } else {
            console.log(`‚ùå ${description}: Th·∫•t b·∫°i - expected ${expectedStatus}, got ${response.status}`);
        }
    } catch (error) {
        console.log(`\n‚ùå Error occurred:`);

        if (error.response) {
            console.log(`üìä Status: ${error.response.status}`);
            console.log(`üìÑ Response data:`, JSON.stringify(error.response.data, null, 2));

            if (error.response.status === expectedStatus) {
                console.log(`‚úÖ ${description}: Th√†nh c√¥ng - nh·∫≠n ƒë√∫ng status ${expectedStatus}`);

                // Ki·ªÉm tra format response
                if (error.response.data) {
                    console.log(`\nüîç Validation Response Analysis:`);
                    console.log(`- Success: ${error.response.data.success}`);
                    console.log(`- Message: ${error.response.data.message}`);

                    if (error.response.data.errors && Array.isArray(error.response.data.errors)) {
                        console.log(`- Number of errors: ${error.response.data.errors.length}`);
                        error.response.data.errors.forEach((err, index) => {
                            console.log(`  Error ${index + 1}:`);
                            console.log(`    Field: ${err.field}`);
                            console.log(`    Message: ${err.message}`);
                            if (err.type) {
                                console.log(`    Type: ${err.type}`);
                            }
                        });
                    } else {
                        console.log(`- No errors array found in response`);
                    }
                }
            } else {
                console.log(`‚ùå ${description}: Th·∫•t b·∫°i - expected ${expectedStatus}, got ${error.response.status}`);
            }
        } else if (error.request) {
            console.log(`‚ùå No response received:`, error.message);
        } else {
            console.log(`‚ùå Request setup error:`, error.message);
        }
    }
}

// Ch·∫°y test
if (require.main === module) {
    testFixedValidation();
}

module.exports = { testFixedValidation };
